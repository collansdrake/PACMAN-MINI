/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pcmn;

/**
 *
 * @author m304user
 */
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.geom.Area;
import java.util.Random;

public class PacMan extends JPanel implements ActionListener, KeyListener{
    int x = 50;
    int y = 50;
    private Timer timer;
    
    
    int n;
    String sc =  "0"; // score set to default
    int result;
    static Color color1;
    int startangle = 30; // position ni 
    int endangle = 300; // mouth
    
    int count = 1;
    // food     
    Random random = new Random();
    int fx = random.nextInt(400);
    int fy = random.nextInt(400);
    Rectangle Charac;
    Rectangle food;
    Timer t = new Timer(5,this);
    
    
    PacMan(){
             t.start();
             addKeyListener(this); // masesent siya sa KeyListener 
             setFocusable (true);
             setFocusTraversalKeysEnabled(false); // para arrow keys lang ang magamit
    }
    
    public void eat(){
        Area a = new Area((Shape) Charac);  // we use shapes by the help of Geom
        Area b = new Area(food);
        // intersect sa Rectangle
        a.intersect(new Area(b));
        b.intersect(new Area(a));
        if(!a.isEmpty() || !b.isEmpty() ){
          fy = random.nextInt(450)+60; // random yung pagpunta ng food sa frame (location)
          fx = random.nextInt(350)+60;
          result = Integer.parseInt(sc); 
          result++;
           
          sc = String.valueOf(result);   // result or score
        }	
    }
    @Override
    public void paint(Graphics g) {
        super.paint(g);
        //background

        Graphics2D graphic = (Graphics2D) g;
        graphic.setColor(Color.BLACK); // bg color 
        graphic.fillRect(0, 0, 550, 600);
        food = new Rectangle(fx, fy, 60, 60);
        graphic.fill(food);
        g.setColor(new Color(255,215,0)); // color of the food 
        g.fillOval(fx + 8, fy + 8, 20, 20); // size of the food 
         
        graphic.setColor(Color.BLACK);
        Charac = new Rectangle(40 + x, 40 + y, 5, 5);
        graphic.fill(Charac);
       // color of pac
        graphic.setColor(Color.YELLOW);
        graphic.fillArc(x, y, 90, 90, startangle, endangle);
       /*eye
        graphic.setColor(Color.BLACK);
        graphic.fillOval(25+x, 10+y, 20,20); */

        // Score
        g.setFont(new Font("Century Gothic", Font.BOLD, 15));
        graphic.setColor(Color.BLACK);
        graphic.drawString("Score: " + sc, 20, 630);
      
        
        
        eat(); // it runs the eat method 
        
        
    }

    public void GameOver(){ // Game Over method para pag naka-abot na sa 10, stop na.
       if(result == 1000){
            fx = 1000; // mas mataas para maalis na yung food sa frame if "result == 10"
            fy = 1000;
            // showConfirmDialog asks a confirming question pwede ding InputDialog
              int gameOver = JOptionPane.showConfirmDialog(null, "GAME OVER! YOU'VE REACHED THE LIMIT!","CLOSE THIS",JOptionPane.DEFAULT_OPTION);
            System.exit(0);      
       }
    }
    @Override
    public void keyTyped(KeyEvent e) {   
    }
    @Override
    public void keyPressed(KeyEvent e) {
        int key = e.getKeyCode();
        if(key == KeyEvent.VK_UP || key == KeyEvent.VK_W){
            startangle = 140;
            endangle = 260;      
            count++;  
            if(count%2 == 0){   
                startangle = 360;
                endangle = 360;
            }
            if(y>-42){
                y-=15;
            }else{
                y=500;
            }
            
        }
        else if(key == KeyEvent.VK_DOWN || key == KeyEvent.VK_S){
            startangle = 300;
            endangle = 300;
            count++;
            if(count%2 == 0){
                startangle = 360;
                endangle = 360;
            }
            if(y < 500){
                y+=15;
            }else{
                y=-42;
            }
        }else if(key == KeyEvent.VK_LEFT || key == KeyEvent.VK_A){
            startangle = 225;
            endangle = 290; 
            count++;
            if(count%2 == 0){ 
                startangle = 360;
                endangle = 360;
            }
            if(x > -42){
            x-=15;
            }else{
                x = 500;
            }   
        }else if(key == KeyEvent.VK_RIGHT || key == KeyEvent.VK_D){
            startangle = 30;
            endangle = 300;
              
            count++;
            if(count%2 == 0){
                
                startangle = 360;
                endangle = 360;
            }
            if(x < 500){
                x+=15;
            }else{
                x=-50;
            }
        }
        System.out.println(count);
        
        repaint();
          GameOver();
    }

    @Override
    public void keyReleased(KeyEvent e) {   
    }
    @Override
    public void actionPerformed(ActionEvent e) {
    }
    public static void main(String [] args){
                JFrame jf = new JFrame("PACMAN MINI-GAME");
                PacMan pac = new PacMan();
                jf.add(pac);
                jf.setSize(500,700);
                jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                jf.setVisible(true);
                ImageIcon img = new ImageIcon("src/img/pac.png"); // ghost img
                jf.setIconImage(img.getImage());
                

    }
    
 
}
